import time
import json
from typing import Callable
from fastapi import Request, Response
from starlette.middleware.base import BaseHTTPMiddleware
from loguru import logger

class LoggingMiddleware(BaseHTTPMiddleware):
    """
    Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤
    
    –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç:
    1. –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –∫–∞–∂–¥—ã–π HTTP –∑–∞–ø—Ä–æ—Å
    2. –õ–æ–≥–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ (–º–µ—Ç–æ–¥, URL, –≤—Ä–µ–º—è)
    3. –ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É
    4. –õ–æ–≥–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–≤–µ—Ç–µ (—Å—Ç–∞—Ç—É—Å, –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è)
    """
    
    async def dispatch(self, request: Request, call_next: Callable) -> Response:
        # –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
        start_time = time.time()
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å
        logger.info(
            f"üì• –í—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å: {request.method} {request.url.path} "
            f"| IP: {request.client.host if request.client else 'unknown'} "
            f"| User-Agent: {request.headers.get('user-agent', 'unknown')}"
        )
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –ª–æ–≥–∏—Ä—É–µ–º –∏—Ö
        if request.query_params:
            logger.debug(f"üîç Query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {dict(request.query_params)}")
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞, –ª–æ–≥–∏—Ä—É–µ–º –µ–≥–æ (—Ç–æ–ª—å–∫–æ –¥–ª—è POST/PUT)
        if request.method in ["POST", "PUT", "PATCH"]:
            try:
                body = await request.body()
                if body:
                    logger.debug(f"üì¶ –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞: {body.decode()[:200]}...")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É
        try:
            response = await call_next(request)
            
            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            process_time = time.time() - start_time
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥—è—â–∏–π –æ—Ç–≤–µ—Ç
            logger.info(
                f"üì§ –ò—Å—Ö–æ–¥—è—â–∏–π –æ—Ç–≤–µ—Ç: {request.method} {request.url.path} "
                f"| –°—Ç–∞—Ç—É—Å: {response.status_code} "
                f"| –í—Ä–µ–º—è: {process_time:.3f}s "
                f"| –†–∞–∑–º–µ—Ä: {len(response.body) if hasattr(response, 'body') else 'unknown'} bytes"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
            response.headers["X-Process-Time"] = str(process_time)
            
            return response
            
        except Exception as e:
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
            process_time = time.time() - start_time
            logger.error(
                f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {request.method} {request.url.path} "
                f"| –û—à–∏–±–∫–∞: {str(e)} "
                f"| –í—Ä–µ–º—è: {process_time:.3f}s"
            )
            raise

class ErrorLoggingMiddleware(BaseHTTPMiddleware):
    """
    Middleware –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫
    """
    
    async def dispatch(self, request: Request, call_next: Callable) -> Response:
        try:
            return await call_next(request)
        except Exception as e:
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
            logger.error(
                f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {request.method} {request.url.path}",
                extra={
                    "error_type": type(e).__name__,
                    "error_message": str(e),
                    "request_url": str(request.url),
                    "request_method": request.method,
                    "client_ip": request.client.host if request.client else "unknown",
                    "user_agent": request.headers.get("user-agent", "unknown")
                }
            )
            raise

class PerformanceMiddleware(BaseHTTPMiddleware):
    """
    Middleware –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    """
    
    def __init__(self, app, slow_request_threshold: float = 1.0):
        super().__init__(app)
        self.slow_request_threshold = slow_request_threshold
    
    async def dispatch(self, request: Request, call_next: Callable) -> Response:
        start_time = time.time()
        
        response = await call_next(request)
        
        process_time = time.time() - start_time
        
        # –õ–æ–≥–∏—Ä—É–µ–º –º–µ–¥–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        if process_time > self.slow_request_threshold:
            logger.warning(
                f"üêå –ú–µ–¥–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å: {request.method} {request.url.path} "
                f"| –í—Ä–µ–º—è: {process_time:.3f}s "
                f"| –ü–æ—Ä–æ–≥: {self.slow_request_threshold}s"
            )
        
        return response 