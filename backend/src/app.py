import os
from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from loguru import logger

# –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ middleware
from .config import settings
from .middleware.logging import LoggingMiddleware, ErrorLoggingMiddleware, PerformanceMiddleware

# –ò–º–ø–æ—Ä—Ç —Ä–æ—É—Ç–µ—Ä–æ–≤
from .routers import base, crypto, technical, websocket

# –ò–º–ø–æ—Ä—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—à–∏–±–æ–∫
from .exceptions import CryptoAPIException, raise_http_exception

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logs_dir = "logs"
if not os.path.exists(logs_dir):
    os.makedirs(logs_dir)
logger.add(settings.log_file, rotation="1 day", retention="7 days", level=settings.log_level)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title=settings.api_title,
    description=settings.api_description,
    version=settings.api_version,
    docs_url="/docs",
    redoc_url="/redoc"
)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ middleware
app.add_middleware(LoggingMiddleware)
app.add_middleware(ErrorLoggingMiddleware)
app.add_middleware(PerformanceMiddleware, slow_request_threshold=1.0)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤
app.include_router(base.router)
app.include_router(crypto.router)
app.include_router(technical.router)
app.include_router(websocket.router)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
@app.exception_handler(CryptoAPIException)
async def crypto_api_exception_handler(request, exc: CryptoAPIException):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
    logger.error(f"API –æ—à–∏–±–∫–∞: {exc.message}", extra=exc.details)
    return raise_http_exception(exc)

@app.exception_handler(Exception)
async def global_exception_handler(request, exc: Exception):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
    logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(exc)}")
    return HTTPException(status_code=500, detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")

@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Crypto Analytics API")
    logger.info(f"üìä –í–µ—Ä—Å–∏—è: {settings.api_version}")
    logger.info(f"üåê –•–æ—Å—Ç: {settings.host}:{settings.port}")
    logger.info(f"üîß –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏: {settings.debug}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞
    if not settings.coinmarketcap_api_key or settings.coinmarketcap_api_key == "your_api_key_here":
        logger.warning("‚ö†Ô∏è API –∫–ª—é—á CoinMarketCap –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        logger.info("üìù –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–∞:")
        logger.info("   1. –ü–æ–ª—É—á–∏—Ç–µ –∫–ª—é—á –Ω–∞ https://coinmarketcap.com/api/")
        logger.info("   2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ backend/env.example –≤ backend/.env")
        logger.info("   3. –í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –∫–ª—é—á –≤ COINMARKETCAP_API_KEY")

@app.on_event("shutdown")
async def shutdown_event():
    """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏"""
    logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Crypto Analytics API") 