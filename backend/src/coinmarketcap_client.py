import httpx
from typing import List, Dict, Optional, Any
from datetime import datetime, timedelta
from loguru import logger
from .config import settings

class CoinMarketCapClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å CoinMarketCap API"""
    
    def __init__(self):
        self.api_key = settings.coinmarketcap_api_key
        self.base_url = "https://pro-api.coinmarketcap.com/v1"
        self.headers = {
            'X-CMC_PRO_API_KEY': self.api_key,
            'Accept': 'application/json'
        }
        
        if not self.api_key or self.api_key == "your_api_key_here":
            logger.warning("‚ö†Ô∏è API –∫–ª—é—á CoinMarketCap –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
            logger.info("üìù –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–∞:")
            logger.info("   1. –ü–æ–ª—É—á–∏—Ç–µ –∫–ª—é—á –Ω–∞ https://coinmarketcap.com/api/")
            logger.info("   2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ backend/env.example –≤ backend/.env")
            logger.info("   3. –í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –∫–ª—é—á –≤ COINMARKETCAP_API_KEY")
    
    async def _make_request(self, endpoint: str, params: Dict[str, Any] = None) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–∞ –∫ API"""
        if not self.api_key or self.api_key == "your_api_key_here":
            raise Exception("API –∫–ª—é—á CoinMarketCap –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        url = f"{self.base_url}/{endpoint}"
        
        async with httpx.AsyncClient(timeout=30.0) as client:
            try:
                response = await client.get(url, headers=self.headers, params=params)
                response.raise_for_status()
                return response.json()
            except httpx.HTTPStatusError as e:
                logger.error(f"HTTP –æ—à–∏–±–∫–∞ {e.response.status_code}: {e.response.text}")
                raise Exception(f"API –æ—à–∏–±–∫–∞: {e.response.status_code}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ CoinMarketCap API: {e}")
                raise
    
    async def get_status(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ API"""
        try:
            # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API
            await self._make_request("cryptocurrency/listings/latest", {"limit": 1})
            return True
        except Exception:
            return False
    
    async def get_crypto_prices(self, limit: int = 100, convert: str = "USD") -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç"""
        params = {
            "limit": limit,
            "convert": convert,
            "sort": "market_cap",
            "sort_dir": "desc"
        }
        
        data = await self._make_request("cryptocurrency/listings/latest", params)
        
        prices = []
        for coin in data.get("data", []):
            quote = coin.get("quote", {}).get(convert, {})
            prices.append({
                "id": coin.get("id"),
                "name": coin.get("name"),
                "symbol": coin.get("symbol"),
                "price": quote.get("price", 0),
                "market_cap": quote.get("market_cap", 0),
                "volume_24h": quote.get("volume_24h", 0),
                "change_24h": quote.get("percent_change_24h", 0),
                "last_updated": coin.get("last_updated")
            })
        
        return prices
    
    async def get_coin_info(self, coin_id: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–Ω–µ—Ç–µ"""
        params = {
            "symbol": coin_id.upper(),
            "convert": "USD"
        }
        
        data = await self._make_request("cryptocurrency/quotes/latest", params)
        
        if not data.get("data"):
            raise Exception("–ú–æ–Ω–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        coin_data = list(data["data"].values())[0]
        quote = coin_data.get("quote", {}).get("USD", {})
        
        return {
            "id": coin_data.get("id"),
            "name": coin_data.get("name"),
            "symbol": coin_data.get("symbol"),
            "slug": coin_data.get("slug"),
            "price": quote.get("price", 0),
            "market_cap": quote.get("market_cap", 0),
            "volume_24h": quote.get("volume_24h", 0),
            "change_1h": quote.get("percent_change_1h", 0),
            "change_24h": quote.get("percent_change_24h", 0),
            "change_7d": quote.get("percent_change_7d", 0),
            "circulating_supply": coin_data.get("circulating_supply"),
            "total_supply": coin_data.get("total_supply"),
            "max_supply": coin_data.get("max_supply"),
            "cmc_rank": coin_data.get("cmc_rank"),
            "last_updated": coin_data.get("last_updated"),
            "tags": coin_data.get("tags", []),
            "platform": coin_data.get("platform"),
            "description": coin_data.get("description")
        }
    
    async def search_cryptocurrencies(self, query: str) -> List[Dict[str, Any]]:
        """–ü–æ–∏—Å–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç"""
        params = {
            "query": query,
            "limit": 10
        }
        
        data = await self._make_request("cryptocurrency/map", params)
        
        results = []
        for coin in data.get("data", []):
            results.append({
                "id": coin.get("id"),
                "name": coin.get("name"),
                "symbol": coin.get("symbol"),
                "slug": coin.get("slug"),
                "rank": coin.get("rank"),
                "is_active": coin.get("is_active"),
                "first_historical_data": coin.get("first_historical_data"),
                "last_historical_data": coin.get("last_historical_data")
            })
        
        return results
    
    async def get_market_data(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–∏—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        params = {
            "convert": "USD"
        }
        
        data = await self._make_request("global-metrics/quotes/latest", params)
        global_data = data.get("data", {})
        quote = global_data.get("quote", {}).get("USD", {})
        
        return {
            "total_market_cap": quote.get("total_market_cap", 0),
            "total_volume_24h": quote.get("total_volume_24h", 0),
            "market_cap_percentage": quote.get("market_cap_dominance", {}),
            "market_cap_change_24h": quote.get("total_market_cap_yesterday_percentage_change", 0),
            "active_cryptocurrencies": global_data.get("active_cryptocurrencies", 0),
            "total_cryptocurrencies": global_data.get("total_cryptocurrencies", 0),
            "active_market_pairs": global_data.get("active_market_pairs", 0),
            "last_updated": global_data.get("last_updated")
        }
    
    async def get_trending_coins(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö –º–æ–Ω–µ—Ç (—Ç–æ–ø –ø–æ –∏–∑–º–µ–Ω–µ–Ω–∏—é —Ü–µ–Ω—ã)"""
        params = {
            "limit": 20,
            "convert": "USD",
            "sort": "percent_change_24h",
            "sort_dir": "desc"
        }
        
        data = await self._make_request("cryptocurrency/listings/latest", params)
        
        trending = []
        for coin in data.get("data", [])[:10]:  # –¢–æ–ø 10
            quote = coin.get("quote", {}).get("USD", {})
            trending.append({
                "id": coin.get("id"),
                "name": coin.get("name"),
                "symbol": coin.get("symbol"),
                "price": quote.get("price", 0),
                "change_24h": quote.get("percent_change_24h", 0),
                "volume_24h": quote.get("volume_24h", 0),
                "market_cap": quote.get("market_cap", 0)
            })
        
        return trending
    
    async def get_historical_data(self, coin_id: str, days: int = 30) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        # CoinMarketCap Pro API —Ç—Ä–µ–±—É–µ—Ç –ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        logger.warning("–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–±—É—é—Ç –ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É CoinMarketCap Pro")
        
        try:
            coin_info = await self.get_coin_info(coin_id)
            
            # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
            current_price = coin_info["price"]
            historical_data = []
            
            for i in range(days):
                date = datetime.now() - timedelta(days=days - i - 1)
                # –ò–º–∏—Ç–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã
                price_change = (i % 7 - 3) * 0.02  # ¬±6% –∏–∑–º–µ–Ω–µ–Ω–∏–µ
                price = current_price * (1 + price_change)
                
                historical_data.append({
                    "timestamp": date.isoformat(),
                    "price": price,
                    "volume": coin_info["volume_24h"] * (0.8 + 0.4 * (i % 5) / 5),
                    "market_cap": coin_info["market_cap"] * (1 + price_change)
                })
            
            return historical_data
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ")
    
    async def get_exchange_rates(self, convert: str = "USD") -> Dict[str, float]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç"""
        params = {
            "convert": convert
        }
        
        data = await self._make_request("tools/price-conversion", params)
        
        rates = {}
        for quote in data.get("data", []):
            symbol = quote.get("symbol")
            price = quote.get("quote", {}).get(convert, {}).get("price", 0)
            rates[symbol] = price
        
        return rates 